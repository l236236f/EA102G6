package com.dailyPhoto.controller;

import java.io.*;
import java.sql.*;
import java.util.*;

import javax.servlet.*;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.http.*;

import com.dailyPhoto.model.*;

@MultipartConfig(fileSizeThreshold = 1920 * 1080, maxFileSize = 5 * 1024 * 1024, maxRequestSize = 5 * 5 * 1024 * 1024)
public class DailyPhotoServlet extends HttpServlet {
	public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		doPost(req, res);
	}

	public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

		req.setCharacterEncoding("UTF-8");
		res.setCharacterEncoding("UTF-8");
		String action = req.getParameter("action");

		if ("insert".equals(action)) { // 來自addEmp.jsp的請求

			List<String> errorMsgs = new LinkedList<String>();
			req.setAttribute("errorMsgs", errorMsgs);

			try {
				/*********************** 1.接收請求參數 - 輸入格式的錯誤處理 *************************/
				Collection<Part> parts = req.getParts();
				for (Part part : parts) {
					if (part.getContentType() != null) {

						String pdNo = req.getParameter("pdNo").trim();

						InputStream is = part.getInputStream();
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						byte[] buffer = new byte[8192];
						int i;
						while ((i = is.read(buffer)) != -1)
							baos.write(buffer, 0, i);
						byte[] photo = baos.toByteArray();
						baos.close();
						is.close();

						DailyPhotoVO dailyPhotoVO = new DailyPhotoVO();

						dailyPhotoVO.setPdNo(pdNo);
						dailyPhotoVO.setPhoto(photo);

						// Send the use back to the form, if there were errors
						if (!errorMsgs.isEmpty()) {
							req.setAttribute("dailyPhotoVO", dailyPhotoVO); // 含有輸入格式錯誤的empVO物件,也存入req
							RequestDispatcher failureView = req
									.getRequestDispatcher("/front-end/dailyPhoto/addDailyPhoto.jsp");
							failureView.forward(req, res);
							return;
						}

						/*************************** 2.開始新增資料 ***************************************/
						DailyPhotoService dailyPhotoSvc = new DailyPhotoService();
						dailyPhotoVO = dailyPhotoSvc.addDailyPhoto(pdNo, photo);
					}
				}
				/*************************** 3.新增完成,準備轉交(Send the Success view) ***********/
				String url = "/front-end/dailyPhoto/listAllDailyPhoto.jsp";
				RequestDispatcher successView = req.getRequestDispatcher(url); // 新增成功後轉交listAllEmp.jsp
				successView.forward(req, res);

				/*************************** 其他可能的錯誤處理 **********************************/
			} catch (Exception e) {
				errorMsgs.add(e.getMessage());
				RequestDispatcher failureView = req.getRequestDispatcher("/front-end/dailyPhoto/addDailyPhoto.jsp");
				failureView.forward(req, res);
			}
		}
		if ("update".equals(action)) { // 來自update_emp_input.jsp的請求

			List<String> errorMsgs = new LinkedList<String>();
			req.setAttribute("errorMsgs", errorMsgs);
			List<DailyPhotoVO> dailyPhotoVOs = new LinkedList<DailyPhotoVO>();
			try {
				/*************************** 1.接收請求參數 - 輸入格式的錯誤處理 **********************/
				
				String dphNo = req.getParameter("dphNo").trim();

				String pdNo = req.getParameter("pdNo").trim();
				Part part = req.getPart("photo");
				InputStream is = part.getInputStream();
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				byte[] buffer = new byte[8192];
				int i;
				while ((i = is.read(buffer)) != -1)
					baos.write(buffer, 0, i);
				byte[] photo = baos.toByteArray();
				baos.close();
				is.close();

				DailyPhotoVO dailyPhotoVO = new DailyPhotoVO();
						
				dailyPhotoVO.setDphNo(dphNo);
				dailyPhotoVO.setPdNo(pdNo);
				dailyPhotoVO.setPhoto(photo);

				if (!errorMsgs.isEmpty()) {
					req.setAttribute("dailyPhotoVO", dailyPhotoVO); // 含有輸入格式錯誤的empVO物件,也存入req
					RequestDispatcher failureView = req
							.getRequestDispatcher("/front-end/dailyPhoto/update_DailyPhoto_input.jsp");
					failureView.forward(req, res);
					return;
				}

						/*************************** 2.開始新增資料 ***************************************/
				DailyPhotoService dailyPhotoSvc = new DailyPhotoService();
				dailyPhotoVO = dailyPhotoSvc.updateDailyPhoto(dphNo, pdNo, photo);
				dailyPhotoVOs.add(dailyPhotoVO);
			
				/*************************** 3.修改完成,準備轉交(Send the Success view) *************/
				req.setAttribute("dailyPhotoVO", dailyPhotoVO); // 資料庫update成功後,正確的的empVO物件,存入req
				String url = "/front-end/dailyPhoto/listOneDailyPhoto.jsp";
				RequestDispatcher successView = req.getRequestDispatcher(url); // 修改成功後,轉交listOneEmp.jsp
				successView.forward(req, res);

				/*************************** 其他可能的錯誤處理 *************************************/
			} catch (Exception e) {
				errorMsgs.add("修改資料失敗:" + e.getMessage());
				RequestDispatcher failureView = req.getRequestDispatcher("/front-end/mem/update_mem_input.jsp");
				failureView.forward(req, res);
			}
		}
		if ("getOne_For_Update".equals(action)) { // 來自listAllEmp.jsp的請求

			List<String> errorMsgs = new LinkedList<String>();
			req.setAttribute("errorMsgs", errorMsgs);

			try {
				/*************************** 1.接收請求參數 ****************************************/
				String dphNo = req.getParameter("dphNo").trim();

				/*************************** 2.開始查詢資料 ****************************************/
				DailyPhotoService dailyPhotoSvc = new DailyPhotoService();
				DailyPhotoVO dailyPhotoVO = dailyPhotoSvc.getOneDailyPhoto(dphNo);

				/*************************** 3.查詢完成,準備轉交(Send the Success view) ************/
				req.setAttribute("dailyPhotoVO", dailyPhotoVO); // 資料庫取出的empVO物件,存入req
				String url = "/front-end/dailyPhoto/update_dailyPhoto_input.jsp";
				RequestDispatcher successView = req.getRequestDispatcher(url);// 成功轉交 update_emp_input.jsp
				successView.forward(req, res);

				/*************************** 其他可能的錯誤處理 **********************************/
			} catch (Exception e) {
				errorMsgs.add("無法取得要修改的資料:" + e.getMessage());
				RequestDispatcher failureView = req.getRequestDispatcher("/front-end/dailyPhoto/listAllDailyPhoto.jsp");
				failureView.forward(req, res);
			}
		}
		if ("delete".equals(action)) { // 來自listAllEmp.jsp

			List<String> errorMsgs = new LinkedList<String>();
			req.setAttribute("errorMsgs", errorMsgs);
	
			try {
				/***************************1.接收請求參數***************************************/
				String dphNo = req.getParameter("dphNo");
				
				/***************************2.開始刪除資料***************************************/
				DailyPhotoService dailyPhotoSvc = new DailyPhotoService();
				dailyPhotoSvc.deleteDailyPhoto(dphNo);
				
				/***************************3.刪除完成,準備轉交(Send the Success view)***********/								
				String url = "/front-end/dailyPhoto/listAllDailyPhoto.jsp";
				RequestDispatcher successView = req.getRequestDispatcher(url);// 刪除成功後,轉交回送出刪除的來源網頁
				successView.forward(req, res);
				
				/***************************其他可能的錯誤處理**********************************/
			} catch (Exception e) {
				errorMsgs.add("刪除資料失敗:"+e.getMessage());
				RequestDispatcher failureView = req
						.getRequestDispatcher("/front-end/dailyPhoto/listAllDailyPhoto.jsp");
				failureView.forward(req, res);
			}
		}
		if ("getOne_For_Display".equals(action)) { // 來自select_page.jsp的請求

			List<String> errorMsgs = new LinkedList<String>();
			req.setAttribute("errorMsgs", errorMsgs);

			try {
				/***************************1.接收請求參數 - 輸入格式的錯誤處理**********************/
				String dphNo = req.getParameter("dphNo").trim();
				if (dphNo == null || dphNo.length() == 0) {
					errorMsgs.add("請輸入員工編號");
				}
				if (!errorMsgs.isEmpty()) {
					RequestDispatcher failureView = req
							.getRequestDispatcher("/front-end/dailyPhoto/select_page.jsp");
					failureView.forward(req, res);
					return;//程式中斷
				}
				
				/***************************2.開始查詢資料*****************************************/
				DailyPhotoService dailyPhotoSvc = new DailyPhotoService();
				DailyPhotoVO dailyPhotoVO = dailyPhotoSvc.getOneDailyPhoto(dphNo);
				if (dailyPhotoVO == null) {
					errorMsgs.add("查無資料");
				}
				if (!errorMsgs.isEmpty()) {
					RequestDispatcher failureView = req
							.getRequestDispatcher("/front-end/dailyPhoto/select_page.jsp");
					failureView.forward(req, res);
					return;//程式中斷
				}
				
				/***************************3.查詢完成,準備轉交(Send the Success view)*************/
				req.setAttribute("dailyPhotoVO", dailyPhotoVO); // 資料庫取出的empVO物件,存入req
				String url = "/front-end/dailyPhoto/listOneDailyPhoto.jsp";
				RequestDispatcher successView = req.getRequestDispatcher(url); // 成功轉交 listOneEmp.jsp
				successView.forward(req, res);

				/***************************其他可能的錯誤處理*************************************/
			} catch (Exception e) {
				errorMsgs.add("無法取得資料:" + e.getMessage());
				RequestDispatcher failureView = req
						.getRequestDispatcher("/front-end/dailyPhoto/select_page.jsp");
				failureView.forward(req, res);
			}
		}
	}

}
